#!/usr/bin/env python3
"""
Extract Media Downloader —Å Playwright - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç –∏ –Ω–µ–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
"""
import os
import asyncio
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any
import hashlib
from pathlib import Path
from urllib.parse import urlparse
from dotenv import load_dotenv
import sys
import time
import random
import base64

# Add parent directory to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.database import Database
from core.config import Config
from app_logging import get_logger
from PIL import Image

# Load environment variables
load_dotenv()


class ExtractMediaDownloaderPlaywright:
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ Playwright
    - –ù–µ–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ (1 —Ñ–∞–π–ª –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
    - Retry –ª–æ–≥–∏–∫–∞ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    - –û–±—Ö–æ–¥ –∑–∞—â–∏—Ç —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
    """
    
    def __init__(self):
        self.logger = get_logger('extract_system.media_downloader_playwright')
        self.db = Database()
        self.config = Config()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–Ω–µ–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ)
        self.max_concurrent = 1  # –¢–æ–ª—å–∫–æ 1 —Ñ–∞–π–ª –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!
        self.max_file_size = self.config.MAX_FILE_SIZE  
        self.min_file_size = self.config.MIN_FILE_SIZE
        self.request_timeout = 30  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ñ–∞–π–ª
        self.batch_size = 5  # –ú–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ç—á–∏
        
        # –ó–∞–¥–µ—Ä–∂–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
        self.delay_between_files = (2, 5)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2-5 —Å–µ–∫
        
        # –ü–∞–ø–∫–∞ –¥–ª—è –º–µ–¥–∏–∞
        self.media_dir = Path("data/media")
        self.media_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã
        self.image_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'}
        self.video_extensions = {'.mp4', '.avi', '.mov', '.webm'}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'processed': 0,
            'downloaded': 0,
            'skipped': 0,
            'failed': 0,
            'total_size': 0
        }
        
        # Browser state
        self.browser_open = False
        
        self.logger.info("ExtractMediaDownloaderPlaywright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–µ–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)")
    
    async def __aenter__(self):
        """Async context manager entry"""
        # Playwright –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ CLI –∫–æ–º–∞–Ω–¥—ã
        self.browser_open = True
        self.logger.info("üåê –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º")
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        self.browser_open = False
        self.logger.info("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def _get_article_info(self, article_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ –∏–∑ –ë–î"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.execute(
                    "SELECT title, source_id FROM articles WHERE article_id = ?",
                    (article_id,)
                )
                row = cursor.fetchone()
                if row:
                    return {'title': row['title'], 'source_id': row['source_id']}
        except Exception as e:
            self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ {article_id}: {e}")
        return None
    
    def _get_file_path(self, url: str, article_id: str) -> Path:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –æ—Ç URL –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        url_hash = hashlib.md5(url.encode()).hexdigest()[:12]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        parsed = urlparse(url)
        path_ext = Path(parsed.path).suffix.lower()
        
        if not path_ext or path_ext not in (self.image_extensions | self.video_extensions):
            path_ext = '.jpg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å—Ç–∞—Ç—å–∏
        article_dir = self.media_dir / article_id[:8]
        article_dir.mkdir(exist_ok=True)
        
        filename = f"{url_hash}{path_ext}"
        return article_dir / filename
    
    def _validate_image_dimensions(self, file_path: Path) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {'valid': bool, 'width': int, 'height': int, 'error': str}
        """
        try:
            with Image.open(file_path) as img:
                width, height = img.size
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                if width < self.config.MIN_IMAGE_WIDTH or height < self.config.MIN_IMAGE_HEIGHT:
                    return {
                        'valid': False, 
                        'width': width, 
                        'height': height,
                        'error': f'–†–∞–∑–º–µ—Ä—ã {width}x{height}px –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö {self.config.MIN_IMAGE_WIDTH}x{self.config.MIN_IMAGE_HEIGHT}px'
                    }
                
                return {
                    'valid': True, 
                    'width': width, 
                    'height': height,
                    'error': None
                }
                
        except Exception as e:
            return {
                'valid': False, 
                'width': None, 
                'height': None,
                'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}'
            }
    
    
    async def _download_single_file(self, media_info: Dict) -> Dict[str, Any]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–∏–Ω –º–µ–¥–∏–∞-—Ñ–∞–π–ª —á–µ—Ä–µ–∑ wget —Å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        """
        import subprocess
        
        media_id = media_info['id']
        url = media_info['url']
        article_id = media_info['article_id']
        source_id = media_info.get('source_id', 'unknown')
        
        # Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º media_id
        self.logger.debug(f"DEBUG: Processing media_id={media_id}, url={url[:50]}...")
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç None media_id
        if media_id is None:
            self.logger.error(f"‚ùå media_id is None –¥–ª—è URL: {url[:60]}...")
            return {
                'success': False,
                'media_id': None,
                'url': url,
                'processing_time': 0,
                'error': 'media_id is None'
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        article_info = self._get_article_info(article_id)
        article_title = article_info.get('title', 'Unknown')[:50] if article_info else 'Unknown'
        
        start_time = time.time()
        
        try:
            self.logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏ '{article_title}' –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_id}: {url[:60]}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path = self._get_file_path(url, article_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º referer –∏–∑ URL
            parsed = urlparse(url)
            referer = f"{parsed.scheme}://{parsed.netloc}/"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º wget —Å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            cmd = [
                'wget',
                '--quiet',  # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
                '--timeout=30',  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫
                '--tries=1',  # –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ (–º—ã —Å–∞–º–∏ –¥–µ–ª–∞–µ–º retry)
                '--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                f'--referer={referer}',
                '--header=Accept: image/webp,image/*,*/*;q=0.8',
                '--header=Accept-Language: en-US,en;q=0.5',
                '--header=Cache-Control: no-cache',
                '-O', str(file_path),  # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                url
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º wget
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode != 0:
                error_msg = stderr.decode('utf-8', errors='ignore').strip()
                if not error_msg:
                    error_msg = f"wget –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {process.returncode}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
                if '403' in error_msg or 'Forbidden' in error_msg:
                    raise Exception("403 Forbidden - –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                elif '404' in error_msg or 'Not Found' in error_msg:
                    raise Exception("404 Not Found - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    raise Exception(f"wget error: {error_msg}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not file_path.exists():
                raise Exception("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            actual_size = file_path.stat().st_size
            
            if actual_size == 0:
                os.remove(file_path)
                raise Exception("–°–∫–∞—á–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if actual_size < self.min_file_size:
                os.remove(file_path)
                raise Exception(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: {actual_size} < {self.min_file_size}")
            
            if actual_size > self.max_file_size:
                os.remove(file_path)
                raise Exception(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {actual_size} > {self.max_file_size}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            ext = file_path.suffix.lower()
            if ext in self.video_extensions:
                media_type = 'video'
                width, height = None, None  # –î–ª—è –≤–∏–¥–µ–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
            else:
                media_type = 'image'
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                validation_result = self._validate_image_dimensions(file_path)
                if not validation_result['valid']:
                    os.remove(file_path)
                    raise Exception(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation_result['error']}")
                
                width = validation_result['width']
                height = validation_result['height']
                self.logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {width}x{height}px")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            with self.db.get_connection() as conn:
                conn.execute("""
                    UPDATE media_files SET
                        file_path = ?,
                        file_size = ?,
                        type = ?,
                        width = ?,
                        height = ?,
                        status = 'completed'
                    WHERE media_id = ?
                """, (
                    str(file_path), 
                    actual_size, 
                    media_type,
                    width,
                    height,
                    media_id
                ))
            
            processing_time = time.time() - start_time
            
            result = {
                'success': True,
                'media_id': media_id,
                'url': url,
                'file_path': str(file_path),
                'file_size': actual_size,
                'media_type': media_type,
                'processing_time': processing_time
            }
            
            self.stats['downloaded'] += 1
            self.stats['total_size'] += actual_size
            
            self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –º–µ–¥–∏–∞-—Ñ–∞–π–ª –¥–ª—è '{article_title}' [{source_id}]: {file_path.name} ({actual_size} bytes, {width}x{height}px) –∑–∞ {processing_time:.1f}—Å")
            return result
            
        except Exception as e:
            processing_time = time.time() - start_time  
            error_msg = str(e)
            self.logger.debug(f"DEBUG: Exception caught for media_id {media_id}: {error_msg}")
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'file_path' in locals() and Path(file_path).exists():
                try:
                    os.remove(file_path)
                except:
                    pass
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º failed
            try:
                with self.db.get_connection() as conn:
                    cursor = conn.execute("""
                        UPDATE media_files SET
                            status = 'failed',
                            error = ?
                        WHERE media_id = ?
                    """, (error_msg, media_id))
                    rows_updated = cursor.rowcount
                    self.logger.debug(f"DEBUG: Updated {rows_updated} rows for media_id {media_id}")
                    if rows_updated == 0:
                        self.logger.warning(f"‚ö†Ô∏è No rows updated for media_id {media_id}")
            except Exception as db_error:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –¥–ª—è {media_id}: {db_error}")
            
            result = {
                'success': False,
                'media_id': media_id,
                'url': url,
                'processing_time': processing_time,
                'error': error_msg
            }
            
            self.stats['failed'] += 1
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ –¥–ª—è '{article_title}' [{source_id}] –∑–∞ {processing_time:.1f}—Å: {error_msg}")
            return result
    
    async def _get_pending_media(self, limit: Optional[int] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        try:
            with self.db.get_connection() as conn:
                query = """
                    SELECT m.media_id as id, m.article_id, m.source_id, m.url, m.type, m.alt_text, m.caption
                    FROM media_files m
                    WHERE m.status = 'pending'
                    ORDER BY m.created_at ASC
                """
                
                if limit:
                    query += f" LIMIT {limit}"
                
                media_list = conn.execute(query).fetchall()
                
                return [dict(row) for row in media_list]
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –º–µ–¥–∏–∞: {e}")
            return []
    
    async def download_media_batch(self, media_list: List[Dict]) -> Dict[str, Any]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –±–∞—Ç—á –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        """
        if not media_list:
            return {"processed": 0, "downloaded": 0, "failed": 0}
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        sources_count = {}
        for media in media_list:
            source = media.get('source_id', 'unknown')
            sources_count[source] = sources_count.get(source, 0) + 1
        
        sources_info = ', '.join([f"{src}: {cnt}" for src, cnt in sources_count.items()])
        self.logger.info(f"üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(media_list)} –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ [{sources_info}]")
        
        batch_stats = {
            "processed": 0,
            "downloaded": 0,
            "failed": 0
        }
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        for i, media_info in enumerate(media_list):
            self.stats['processed'] += 1
            batch_stats["processed"] += 1
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª (–±–µ–∑ retry)
            result = await self._download_single_file(media_info)
            
            if result['success']:
                batch_stats["downloaded"] += 1
            else:
                batch_stats["failed"] += 1
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(media_list) - 1:
                delay = random.uniform(*self.delay_between_files)
                self.logger.info(f"‚è±Ô∏è –ü–∞—É–∑–∞ {delay:.1f} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞–π–ª–æ–º...")
                await asyncio.sleep(delay)
        
        success_rate = (batch_stats["downloaded"] / batch_stats["processed"] * 100) if batch_stats["processed"] > 0 else 0
        self.logger.info(f"‚úÖ –ë–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–∫–∞—á–∞–Ω–æ {batch_stats['downloaded']}/{batch_stats['processed']} ({success_rate:.1f}%), –æ—à–∏–±–æ–∫: {batch_stats['failed']}")
        return batch_stats
    
    async def download_all_media(self) -> Dict[str, Any]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –í–°–ï pending –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±–∞—Ç—á–∞–º–∏
        """
        self.logger.info("üì• –ù–∞—á–∏–Ω–∞–µ–º –Ω–µ–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö pending –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤")
        
        total_stats = {
            "processed": 0,
            "downloaded": 0,
            "failed": 0,
            "batches": 0
        }
        
        try:
            while True:
                # –ü–æ–ª—É—á–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –±–∞—Ç—á
                pending_media = await self._get_pending_media(limit=self.batch_size)
                
                if not pending_media:
                    self.logger.info("üì≠ –ù–µ—Ç –±–æ–ª—å—à–µ pending –º–µ–¥–∏–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                    break
                
                self.logger.info(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {total_stats['batches'] + 1}: {len(pending_media)} —Ñ–∞–π–ª–æ–≤")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –±–∞—Ç—á
                batch_stats = await self.download_media_batch(pending_media)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_stats["processed"] += batch_stats["processed"]
                total_stats["downloaded"] += batch_stats["downloaded"]
                total_stats["failed"] += batch_stats["failed"]
                total_stats["batches"] += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if pending_media:  # –ï—Å–ª–∏ –±—ã–ª–∏ —Ñ–∞–π–ª—ã
                    batch_delay = random.uniform(5, 10)
                    self.logger.info(f"‚è±Ô∏è –ü–∞—É–∑–∞ {batch_delay:.1f} —Å–µ–∫ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...")
                    await asyncio.sleep(batch_delay)
                    
        except KeyboardInterrupt:
            self.logger.warning("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        finally:
            # –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_stats["total_size_mb"] = round(self.stats['total_size'] / 1024 / 1024, 2)
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if total_stats['processed'] > 0:
                success_rate = (total_stats['downloaded'] / total_stats['processed'] * 100)
                avg_size = self.stats['total_size'] / total_stats['downloaded'] if total_stats['downloaded'] > 0 else 0
                self.logger.info(
                    f"üèÅ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_stats['processed']} —Ñ–∞–π–ª–æ–≤, "
                    f"—É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ {total_stats['downloaded']} ({success_rate:.1f}%), "
                    f"–æ—à–∏–±–æ–∫ {total_stats['failed']}, –±–∞—Ç—á–µ–π {total_stats['batches']}, "
                    f"—Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {avg_size/1024:.1f}KB"
                )
            else:
                self.logger.info("üèÅ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º media_status –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
        self._update_articles_media_status()
        
        return total_stats
    
    def _update_articles_media_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç media_status –¥–ª—è —Å—Ç–∞—Ç–µ–π, –≥–¥–µ –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"""
        try:
            with self.db.get_connection() as conn:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—å–∏ –≥–¥–µ –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–Ω–µ—Ç pending)
                cursor = conn.execute("""
                    UPDATE articles 
                    SET media_status = 'ready'
                    WHERE media_status = 'processing'
                      AND article_id NOT IN (
                          SELECT DISTINCT article_id 
                          FROM media_files 
                          WHERE status = 'pending'
                      )
                """)
                
                updated_count = cursor.rowcount
                if updated_count > 0:
                    self.logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ media_status –¥–ª—è {updated_count} —Å—Ç–∞—Ç–µ–π –Ω–∞ 'ready'")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è media_status: {e}")
    
    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        return {
            "processed": self.stats['processed'],
            "downloaded": self.stats['downloaded'],
            "skipped": self.stats['skipped'],
            "failed": self.stats['failed'],
            "total_size_mb": round(self.stats['total_size'] / 1024 / 1024, 2),
            "success_rate": (
                self.stats['downloaded'] / max(1, self.stats['processed']) * 100
            )
        }


# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def test_playwright_downloader():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Playwright —Å–∫–∞—á–∏–≤–∞—Ç–µ–ª—å"""
    logger = get_logger('extract_system.test')
    
    async with ExtractMediaDownloaderPlaywright() as downloader:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
        test_media = [{
            'id': 1,
            'article_id': 'test123',
            'url': 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png',
            'type': 'image',
            'alt_text': 'Google Logo',
            'caption': None
        }]
        
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        result = await downloader.download_media_batch(test_media)
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {result}")
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {downloader.get_statistics()}")


if __name__ == "__main__":
    asyncio.run(test_playwright_downloader())