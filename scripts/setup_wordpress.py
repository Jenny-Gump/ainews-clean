#!/usr/bin/env python3
"""
WordPress Setup Helper
–ü–æ–º–æ—â–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WordPress –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import os
import sys
from pathlib import Path

# Add parent directory to path
sys.path.append(str(Path(__file__).parent.parent))

from core.config import Config
from core.database import Database
from services.wordpress_publisher import WordPressPublisher
from app_logging import get_logger

logger = get_logger('wordpress_setup')


def check_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WordPress"""
    config = Config()
    
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WordPress ===\n")
    
    # Check API keys
    checks = {
        "DeepSeek API Key": bool(config.openai_api_key),
        "WordPress API URL": bool(config.wordpress_api_url),
        "WordPress Username": bool(config.wordpress_username),
        "WordPress App Password": bool(config.wordpress_app_password),
    }
    
    all_ok = True
    for name, status in checks.items():
        status_text = "‚úÖ OK" if status else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        print(f"{name}: {status_text}")
        if not status:
            all_ok = False
    
    if not all_ok:
        print("\n‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è!")
        print("\n–î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–∞–π–ª .env:")
        print("OPENAI_API_KEY=sk-...")
        print("WORDPRESS_API_URL=https://your-site.com/wp-json/wp/v2")
        print("WORDPRESS_USERNAME=your_username")
        print("WORDPRESS_APP_PASSWORD=xxxx xxxx xxxx xxxx xxxx xxxx")
        return False
    
    print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ!")
    return True


def test_wordpress_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WordPress API"""
    config = Config()
    
    if not all([config.wordpress_api_url, config.wordpress_username, config.wordpress_app_password]):
        print("\n‚ùå WordPress API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    print("\n=== –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WordPress ===\n")
    
    try:
        import requests
        from requests.auth import HTTPBasicAuth
        
        # Test categories endpoint
        url = f"{config.wordpress_api_url}/categories"
        auth = HTTPBasicAuth(config.wordpress_username, config.wordpress_app_password)
        
        response = requests.get(url, auth=auth, timeout=10)
        
        if response.status_code == 200:
            categories = response.json()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
            
            # Show existing categories
            if categories:
                print("\n–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
                for cat in categories[:10]:  # Show first 10
                    print(f"  - {cat['name']} (ID: {cat['id']})")
                
                if len(categories) > 10:
                    print(f"  ... –∏ –µ—â–µ {len(categories) - 10}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False


def check_articles_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞—Ç–µ–π"""
    db = Database()
    
    print("\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç–µ–π ===\n")
    
    with db.get_connection() as conn:
        # Total articles
        total = conn.execute("SELECT COUNT(*) FROM articles").fetchone()[0]
        print(f"–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {total}")
        
        # Completed articles
        completed = conn.execute(
            "SELECT COUNT(*) FROM articles WHERE content_status = 'completed'"
        ).fetchone()[0]
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {completed}")
        
        # WordPress articles
        cursor = conn.execute("""
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN translation_status = 'translated' THEN 1 ELSE 0 END) as translated,
                SUM(CASE WHEN translation_status = 'failed' THEN 1 ELSE 0 END) as failed,
                SUM(CASE WHEN published_to_wp = 1 THEN 1 ELSE 0 END) as published
            FROM wordpress_articles
        """)
        wp_stats = cursor.fetchone()
        
        print(f"\nWordPress —Å—Ç–∞—Ç—å–∏:")
        print(f"  –í—Å–µ–≥–æ: {wp_stats[0]}")
        print(f"  –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {wp_stats[1]}")
        print(f"  –û—à–∏–±–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {wp_stats[2]}")
        print(f"  –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {wp_stats[3]}")
        
        # Ready to translate
        ready_to_translate = completed - wp_stats[0]
        print(f"\n–ì–æ—Ç–æ–≤–æ –∫ –ø–µ—Ä–µ–≤–æ–¥—É: {ready_to_translate}")
        
        # Ready to publish
        ready_to_publish = wp_stats[1] - wp_stats[3]
        print(f"–ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {ready_to_publish}")


def create_test_categories():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ WordPress"""
    config = Config()
    
    if not all([config.wordpress_api_url, config.wordpress_username, config.wordpress_app_password]):
        print("\n‚ùå WordPress API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    print("\n=== –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ===\n")
    
    required_categories = [
        "LLM", "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–¢–µ—Ö–Ω–∏–∫–∞", "Digital", 
        "–õ—é–¥–∏", "–§–∏–Ω–∞–Ω—Å—ã", "–ù–∞—É–∫–∞", "–û–±—É—á–µ–Ω–∏–µ", "–î—Ä—É–≥–∏–µ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏"
    ]
    
    try:
        import requests
        from requests.auth import HTTPBasicAuth
        
        auth = HTTPBasicAuth(config.wordpress_username, config.wordpress_app_password)
        
        # Get existing categories
        url = f"{config.wordpress_api_url}/categories"
        response = requests.get(url, auth=auth, params={'per_page': 100})
        
        if response.status_code != 200:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {response.status_code}")
            return
        
        existing = {cat['name']: cat['id'] for cat in response.json()}
        
        # Create missing categories
        for cat_name in required_categories:
            if cat_name in existing:
                print(f"‚úÖ {cat_name} - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing[cat_name]})")
            else:
                # Create category
                data = {
                    'name': cat_name,
                    'slug': cat_name.lower().replace(' ', '-')
                }
                
                response = requests.post(url, json=data, auth=auth)
                
                if response.status_code == 201:
                    new_cat = response.json()
                    print(f"‚úÖ {cat_name} - —Å–æ–∑–¥–∞–Ω–∞ (ID: {new_cat['id']})")
                else:
                    print(f"‚ùå {cat_name} - –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.text[:100]}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ WordPress Setup Helper")
    print("=" * 50)
    
    # Check configuration
    if not check_configuration():
        return
    
    # Check database status
    check_articles_status()
    
    # Test WordPress connection
    if test_wordpress_connection():
        print("\n" + "=" * 50)
        print("\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏? (y/n): ", end='')
        if input().lower() == 'y':
            create_test_categories()
    
    print("\n" + "=" * 50)
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:")
    print("1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–µ–π: python core/main.py --wordpress-prepare --limit 5")
    print("2. –ü—É–±–ª–∏–∫–∞—Ü–∏—è: python core/main.py --wordpress-publish --limit 5")


if __name__ == "__main__":
    main()