#!/usr/bin/env python3
"""
Single Article Pipeline - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–µ–π –ø–æ –æ–¥–Ω–æ–π —á–µ—Ä–µ–∑ –≤–µ—Å—å —Ü–∏–∫–ª
"""
import asyncio
import time
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any
from enum import Enum

from core.database import Database
from core.config import Config
from app_logging import get_logger, LogContext
from services.content_parser import ContentParser
from services.media_processor import ExtractMediaDownloaderPlaywright
from services.wordpress_publisher import WordPressPublisher

logger = get_logger('core.single_pipeline')

class PipelineStatus(Enum):
    RUNNING = "running"
    PAUSED = "paused" 
    STOPPED = "stopped"
    ERROR = "error"

class SingleArticlePipeline:
    """–ü–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–µ–π –ø–æ –æ–¥–Ω–æ–π —á–µ—Ä–µ–∑ –≤–µ—Å—å —Ü–∏–∫–ª"""
    
    def __init__(self):
        self.db = Database()
        self.config = Config()
        self.status = PipelineStatus.STOPPED
        self.current_article = None
        self.processed_count = 0
        self.success_count = 0
        self.error_count = 0
        self.wordpress_published = 0  # –°—á–µ—Ç—á–∏–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –≤ WordPress
        self.start_time = None
        self.stop_requested = False
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
        self.content_parser = None
        self.media_downloader = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–∑–∞–º
        self.phase_stats = {
            'parsing': {'success': 0, 'failed': 0},
            'media': {'success': 0, 'failed': 0},
            'wordpress_prep': {'success': 0, 'failed': 0},
            'wordpress_pub': {'success': 0, 'failed': 0}
        }
        
        # WebSocket –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.callbacks = {
            'on_status_change': None,
            'on_article_start': None,
            'on_phase_complete': None,
            'on_article_complete': None,
            'on_error': None
        }
    
    def set_callback(self, event: str, callback):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if event in self.callbacks:
            self.callbacks[event] = callback
    
    async def _notify(self, event: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback"""
        if self.callbacks.get(event):
            try:
                await self.callbacks[event](data)
            except Exception as e:
                logger.error(f"Callback error for {event}: {e}")
    
    def get_next_article(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞—Ç—å—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            with self.db.get_connection() as conn:
                # –ë–µ—Ä–µ–º pending —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ parsed —Å –≥–æ—Ç–æ–≤—ã–º–∏ –º–µ–¥–∏–∞
                # –ü—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å FIFO - –ø–µ—Ä–≤–∞—è –ø—Ä–∏—à–ª–∞, –ø–µ—Ä–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
                cursor = conn.execute("""
                    SELECT article_id, title, url, source_id, content_status, media_status
                    FROM articles 
                    WHERE content_status IN ('pending', 'parsed')
                      AND (content_status = 'pending' OR media_status = 'ready')
                    ORDER BY created_at ASC
                    LIMIT 1
                """)
                
                row = cursor.fetchone()
                if row:
                    article = dict(row)
                    logger.info(f"üìé Next article: {article['article_id']} - {article['title'][:50]} (status: {article['content_status']}, media: {article.get('media_status', 'pending')})")
                    return article
                    
        except Exception as e:
            logger.error(f"Error getting next article: {e}")
        
        return None
    
    async def process_single_article(self, article: Dict[str, Any]) -> Dict[str, Any]:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏"""
        self.current_article = article
        article_id = article['article_id']
        title = article['title'][:50]
        
        result = {
            'article_id': article_id,
            'title': title,
            'phases_completed': [],
            'phases_failed': [],
            'success': False,
            'error': None
        }
        
        # –°—Ç–∞—Ç—å—è —É–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω–∞ –≤ get_next_article
        
        await self._notify('on_article_start', {
            'article_id': article_id,
            'title': title,
            'status': article['content_status']
        })
        
        try:
            with LogContext.article(article_id=article_id, article_title=title):
                logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç—å–∏: {title}")
                
                # Phase 2: Content Parsing (–µ—Å–ª–∏ pending)
                if article['content_status'] == 'pending':
                    phase_result = await self._phase_content_parsing(article)
                    if phase_result['success']:
                        result['phases_completed'].append('parsing')
                        self.phase_stats['parsing']['success'] += 1
                        article['content_status'] = 'parsed'  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    else:
                        result['phases_failed'].append('parsing')
                        self.phase_stats['parsing']['failed'] += 1
                        result['error'] = phase_result.get('error')
                        logger.warning(f"‚ö†Ô∏è Phase 2 failed for {article_id}, article marked as 'failed' in DB. Completing this article.")
                        # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ —Ñ–∞–∑—ã, –Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç—å–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                        result['success'] = False
                        # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∑—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                        from app_logging import log_operation
                        log_operation('‚è≠Ô∏è –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∑—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã: –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è',
                            phase='pipeline',
                            reason='parsing_failed',
                            article_id=article_id,
                            skipped_phases=['media_processing', 'wordpress_prep', 'wordpress_pub']
                        )
                        return result  # –û–¢–ö–ê–¢: return –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                
                # Phase 3: Media Processing (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞)
                if article['content_status'] == 'parsed':
                    media_count = self._get_article_media_count(article_id)
                    logger.info(f"üìä Media files count: {media_count}")
                    
                    if media_count > 0:
                        logger.info(f"üñºÔ∏è Processing {media_count} media files...")
                        phase_result = await self._phase_media_processing(article)
                        if phase_result['success']:
                            result['phases_completed'].append('media')
                            self.phase_stats['media']['success'] += 1
                            article['media_status'] = 'ready'
                            # –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î —Ç–æ–∂–µ!
                            self._update_media_status(article_id, 'ready')
                        else:
                            result['phases_failed'].append('media')
                            self.phase_stats['media']['failed'] += 1
                            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –ë–ê–ì–ê: –ú–µ–¥–∏–∞ –æ—à–∏–±–∫–∏ –ù–ï –¥–æ–ª–∂–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å WordPress!
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º media_status = 'ready' —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–æ–ª–∂–∏–ª—Å—è
                            logger.warning("Media processing failed, but continuing to WordPress phases...")
                            article['media_status'] = 'ready'
                            self._update_media_status(article_id, 'ready')
                    else:
                        logger.info("üì≠ No media files, marking as ready")
                        self._update_media_status(article_id, 'ready')
                        article['media_status'] = 'ready'
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—å–∏ –Ω–∞ parsed (–≤ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç completed)
                    logger.info("‚úÖ Article parsed, keeping status as 'parsed'")
                    # –°—Ç–∞—Ç—É—Å —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ ContentParser –Ω–∞ 'parsed'
                    article['content_status'] = 'parsed'
                
                    # Phase 4: WordPress Preparation (–µ—Å–ª–∏ ready)
                    logger.info(f"Checking WordPress phases: media_status={article['media_status']}")
                    if article['media_status'] == 'ready':
                        logger.info("Media is ready, checking WordPress preparation...")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –ª–∏ —É–∂–µ
                        if not self._is_wordpress_prepared(article_id):
                            logger.info("Article not prepared for WordPress, starting Phase 4...")
                            phase_result = await self._phase_wordpress_preparation(article)
                            if phase_result['success']:
                                result['phases_completed'].append('wordpress_prep')
                                self.phase_stats['wordpress_prep']['success'] += 1
                            else:
                                result['phases_failed'].append('wordpress_prep')
                                self.phase_stats['wordpress_prep']['failed'] += 1
                                result['error'] = phase_result.get('error')
                                return result  # –û–¢–ö–ê–¢: return –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                        
                        # Phase 5: WordPress Publishing
                        if not self._is_wordpress_published(article_id):
                            phase_result = await self._phase_wordpress_publishing(article)
                            if phase_result['success']:
                                result['phases_completed'].append('wordpress_pub')
                                self.phase_stats['wordpress_pub']['success'] += 1
                                result['success'] = True
                            else:
                                result['phases_failed'].append('wordpress_pub')
                                self.phase_stats['wordpress_pub']['failed'] += 1
                                result['error'] = phase_result.get('error')
                                return result  # –û–¢–ö–ê–¢: return –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                
                result['success'] = True  # –û–¢–ö–ê–¢: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ success –¥–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
                logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {title}")
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {article_id}: {e}")
            result['error'] = str(e)
        
        finally:
            await self._notify('on_article_complete', result)
            self.current_article = None
        
        return result
    
    async def _phase_content_parsing(self, article: Dict[str, Any]) -> Dict[str, Any]:
        """Phase 2: Content Parsing"""
        logger.info("üìÑ Phase 2: Content Parsing")
        
        # Log phase start
        import time
        from app_logging import log_operation, log_error
        
        phase_start = time.time()
        article_title = article.get('title', 'Unknown Article')[:50] + '...' if len(article.get('title', '')) > 50 else article.get('title', 'Unknown Article')
        log_operation(f'–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {article_title}', 
                     phase='content_parsing', 
                     article_id=article['article_id'],
                     article_title=article_title)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ContentParser —á–µ—Ä–µ–∑ async context manager
            async with ContentParser() as parser:
                    result = await parser.parse_single_article(
                        article_id=article['article_id'],
                        url=article['url'],
                        source_id=article['source_id']
                    )
                    
                    await self._notify('on_phase_complete', {
                        'phase': 'parsing',
                        'success': result.get('success', False),
                        'article_id': article['article_id']
                    })
                    
                    if result.get("success"):
                        logger.info(f"‚úÖ Successfully parsed: {result.get('content_length', 0)} chars")
                        # Log phase completion
                        log_operation(f'‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω: {result.get("content_length", 0)} —Å–∏–º–≤–æ–ª–æ–≤, {result.get("word_count", 0)} —Å–ª–æ–≤',
                            phase='content_parsing',
                            article_id=article['article_id'],
                            duration_seconds=time.time() - phase_start,
                            success=True,
                            content_length=result.get('content_length', 0),
                            word_count=result.get('word_count', 0)
                        )
                        return {'success': True}
                    else:
                        error_msg = result.get('error', 'Unknown parsing error')
                        logger.error(f"‚ùå Parsing failed: {error_msg}")
                        log_operation(f'‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É–¥–∞—á–µ–Ω: {error_msg}',
                            phase='content_parsing', 
                            success=False,
                            article_id=article['article_id'],
                            error_reason=error_msg
                        )
                        return {'success': False, 'error': error_msg}
        
        except Exception as e:
            error_msg = f"Content parsing failed: {e}"
            logger.error(error_msg)
            log_operation(f'‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)[:50]}...',
                phase='content_parsing', 
                success=False,
                article_id=article['article_id'],
                error_reason='critical_exception',
                error_message=str(e)[:100]
            )
            return {'success': False, 'error': error_msg}
    
    async def _phase_media_processing(self, article: Dict[str, Any]) -> Dict[str, Any]:
        """Phase 3: Media Processing"""
        logger.info("üñºÔ∏è Phase 3: Media Processing")
        
        # Log phase start
        import time
        from app_logging import log_operation, log_error
        phase_start = time.time()
        media_count = self._get_article_media_count(article['article_id'])
        log_operation(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞: {media_count} —Ñ–∞–π–ª–æ–≤',
                     phase='media_processing', 
                     article_id=article['article_id'],
                     media_count=media_count)
        
        try:
            async with ExtractMediaDownloaderPlaywright() as downloader:
                # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏
                media_list = await self._get_article_media(article['article_id'])
                
                if not media_list:
                    logger.info("No media files found for article")
                    result = {'success': True, 'processed': 0}
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏
                    result = await downloader.download_media_batch(media_list)
            
            # Log media processing result
            downloaded = result.get('downloaded', 0)
            processed = result.get('processed', 0)
            if downloaded > 0:
                log_operation(f'‚úÖ –ú–µ–¥–∏–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {downloaded}/{processed} —Ñ–∞–π–ª–æ–≤',
                    phase='media_processing',
                    article_id=article['article_id'],
                    duration_seconds=time.time() - phase_start,
                    downloaded=downloaded,
                    processed=processed
                )
            elif processed > 0:
                log_operation(f'‚ö†Ô∏è –ú–µ–¥–∏–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {processed} —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é',
                    phase='media_processing',
                    article_id=article['article_id'],
                    duration_seconds=time.time() - phase_start,
                    downloaded=downloaded,
                    processed=processed
                )
            else:
                log_operation('–ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ',
                    phase='media_processing',
                    article_id=article['article_id'],
                    duration_seconds=time.time() - phase_start
                )
            
            await self._notify('on_phase_complete', {
                'phase': 'media',
                'success': result.get('downloaded', 0) > 0,
                'article_id': article['article_id'],
                'media_processed': result.get('processed', 0)
            })
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ–¥–∏–∞ failure –ù–ï –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞
            # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –¥–∞–∂–µ –µ—Å–ª–∏ –ù–ò –û–î–ù–ê –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Å–∫–∞—á–∞–ª–∞—Å—å
            success = True  # –ú–µ–¥–∏–∞ –æ—à–∏–±–∫–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å—Ç–∞—Ç—å–∏
            
            return {
                'success': success,
                'processed': result.get('processed', 0),
                'downloaded': result.get('downloaded', 0),
                'original_success': result.get('downloaded', 0) > 0 or result.get('processed', 0) == 0
            }
        
        except Exception as e:
            error_msg = f"Media processing failed: {e}"
            logger.error(error_msg)
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–∞–∂–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –º–µ–¥–∏–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å WordPress
            return {'success': True, 'error': error_msg, 'processed': 0, 'downloaded': 0}
    
    async def _phase_wordpress_preparation(self, article: Dict[str, Any]) -> Dict[str, Any]:
        """Phase 4: WordPress Preparation"""
        logger.info("üåê Phase 4: WordPress Preparation")
        
        # Log phase start
        import time
        from app_logging import log_operation, log_error
        phase_start = time.time()
        log_operation('–ü–µ—Ä–µ–≤–æ–¥ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è WordPress',
                     phase='wordpress_prep', 
                     article_id=article['article_id'])
        
        try:
            from services.wordpress_publisher import WordPressPublisher
            publisher = WordPressPublisher(self.config, self.db)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–∏ —É–∂–µ
            if publisher._is_already_processed(article['article_id']):
                logger.info(f"Article {article['article_id']} already processed in WordPress")
                return {'success': True, 'already_processed': True}
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ –ë–î
            with self.db.get_connection() as conn:
                cursor = conn.execute("""
                    SELECT 
                        a.article_id,
                        a.title,
                        a.content,
                        a.url,
                        a.published_date,
                        a.source_id,
                        s.name as source_name,
                        s.category
                    FROM articles a
                    JOIN sources s ON a.source_id = s.source_id
                    WHERE a.article_id = ?
                """, (article['article_id'],))
                
                row = cursor.fetchone()
                if not row:
                    return {'success': False, 'error': 'Article not found in database'}
                
                full_article = dict(row)
            
            # –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã failed –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –õ–õ–ú
            if full_article.get('content'):
                original_content = full_article['content']
                cleaned_content = self._clean_failed_image_placeholders(original_content, article['article_id'])
                if cleaned_content != original_content:
                    full_article['content'] = cleaned_content
                    logger.info(f"Cleaned failed image placeholders from content for LLM processing")
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ event loop
            async def translation_task():
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é —á–µ—Ä–µ–∑ LLM (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
                logger.info(f"Processing article {article['article_id']}: {full_article['title'][:50]}...")
                wp_data = await asyncio.get_event_loop().run_in_executor(
                    None, publisher._process_article_with_llm, full_article
                )
                
                if wp_data:
                    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–≥–æ–≤ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å DeepSeek API
                    logger.info("Waiting 5 seconds before tag generation to avoid API overload...")
                    await asyncio.sleep(5)
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏
                    try:
                        logger.info("Generating tags for translated article...")
                        tags = await publisher._generate_tags_with_llm(wp_data)
                        wp_data['tags'] = tags
                        logger.info(f"Generated tags: {tags}")
                    except Exception as e:
                        logger.warning(f"Failed to generate tags: {e}, using empty tags")
                        wp_data['tags'] = []
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–µ–≥–∞–º–∏
                    await asyncio.get_event_loop().run_in_executor(
                        None, publisher._save_wordpress_article, article['article_id'], wp_data
                    )
                    logger.info(f"‚úÖ WordPress preparation successful for {article['article_id']}")
                    # Log phase completion
                    log_operation(f'‚úÖ –°—Ç–∞—Ç—å—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–æ {len(wp_data.get("tags", []))} —Ç–µ–≥–æ–≤',
                        phase='wordpress_prep',
                        article_id=article['article_id'],
                        duration_seconds=time.time() - phase_start,
                        success=True,
                        tags_count=len(wp_data.get('tags', []))
                    )
                    return True
                else:
                    logger.error(f"‚ùå WordPress preparation failed for {article['article_id']}")
                    return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–≤–æ–¥–∞
            success = await translation_task()
            
            await self._notify('on_phase_complete', {
                'phase': 'wordpress_prep',
                'success': success,
                'article_id': article['article_id']
            })
            
            return {'success': success}
        
        except Exception as e:
            error_msg = f"WordPress preparation failed: {e}"
            logger.error(error_msg)
            return {'success': False, 'error': error_msg}
    
    async def _phase_wordpress_publishing(self, article: Dict[str, Any]) -> Dict[str, Any]:
        """Phase 5: WordPress Publishing"""
        logger.info("üì§ Phase 5: WordPress Publishing")
        
        # Log phase start
        import time
        from app_logging import log_operation, log_error
        phase_start = time.time()
        log_operation('–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ WordPress',
                     phase='wordpress_pub', 
                     article_id=article['article_id'])
        
        try:
            from services.wordpress_publisher import WordPressPublisher
            publisher = WordPressPublisher(self.config, self.db)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ wordpress_articles –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏
            with self.db.get_connection() as conn:
                cursor = conn.execute("""
                    SELECT 
                        id,
                        title,
                        content,
                        excerpt,
                        slug,
                        categories,
                        tags,
                        _yoast_wpseo_title,
                        _yoast_wpseo_metadesc,
                        focus_keyword,
                        featured_image_index,
                        published_to_wp
                    FROM wordpress_articles
                    WHERE article_id = ? AND translation_status = 'translated'
                """, (article['article_id'],))
                
                row = cursor.fetchone()
                if not row:
                    logger.warning(f"No translated content found for article {article['article_id']}")
                    return {'success': False, 'error': 'Article not translated yet'}
                
                wp_article = dict(row)
                wp_article['article_id'] = article['article_id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ
                if wp_article['published_to_wp']:
                    logger.info(f"Article {article['article_id']} already published")
                    return {'success': True, 'already_published': True}
            
            logger.info(f"Publishing article: {wp_article['title'][:50]}...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è WordPress
            wp_post_data = publisher._prepare_wordpress_post(wp_article)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –≤ WordPress
            wp_post_id = publisher._create_wordpress_post(wp_post_data)
            
            if wp_post_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î —Å WordPress post ID
                publisher._mark_as_published(wp_article['id'], wp_post_id)
                logger.info(f"‚úÖ Successfully published article with WordPress ID: {wp_post_id}")
                # Log phase completion
                log_operation(f'‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ailynx.ru/?p={wp_post_id}',
                    phase='wordpress_pub',
                    article_id=article['article_id'],
                    duration_seconds=time.time() - phase_start,
                    success=True,
                    wp_post_id=wp_post_id,
                    wp_url=f'https://ailynx.ru/?p={wp_post_id}'
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
                logger.info(f"Processing media for article {article['article_id']}")
                
                # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–¥–∏–∞
                import time
                logger.info("Waiting 5 seconds before media processing...")
                time.sleep(5)
                
                media_result = publisher._process_media_for_article(
                    article['article_id'], 
                    wp_post_id,
                    wp_article['title']
                )
                
                if not media_result:
                    logger.warning("Media processing had issues but post was published")
                
                # –ù–û–í–û–ï: –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ URL
                logger.info(f"Replacing placeholders with local media URLs for post {wp_post_id}")
                updated_content = publisher._replace_image_placeholders(wp_article['content'], article['article_id'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ –≤ WordPress
                if publisher._update_post_content(wp_post_id, updated_content):
                    logger.info(f"‚úÖ Post {wp_post_id} content updated with local media URLs")
                else:
                    logger.warning(f"‚ö†Ô∏è Failed to update post {wp_post_id} content, using external URLs")
                
                success = True
            else:
                logger.error(f"‚ùå Failed to create WordPress post for {article['article_id']}")
                success = False
            
            await self._notify('on_phase_complete', {
                'phase': 'wordpress_pub',
                'success': success,
                'article_id': article['article_id'],
                'wp_post_id': wp_post_id if success else None
            })
            
            return {
                'success': success,
                'wp_post_id': wp_post_id if success else None
            }
            
        except Exception as e:
            error_msg = f"WordPress publishing failed: {e}"
            logger.error(error_msg)
            return {'success': False, 'error': error_msg}
    
    async def run_pipeline(self, continuous_mode: bool = False, max_articles: Optional[int] = None, delay_between: int = 5) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–π–ø–ª–∞–π–Ω
        
        Args:
            continuous_mode: –ï—Å–ª–∏ True, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ pending —Å—Ç–∞—Ç—å–∏ –≤ —Ü–∏–∫–ª–µ
            max_articles: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (None = –≤—Å–µ)
            delay_between: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.status = PipelineStatus.RUNNING
        self.start_time = datetime.now()
        self.stop_requested = False
        self.wordpress_published = 0
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è continuous mode
        self.processed_count = 0
        self.success_count = 0
        self.error_count = 0
        cycle_count = 0
        
        await self._notify('on_status_change', {
            'status': self.status.value,
            'started_at': self.start_time.isoformat()
        })
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞
        from app_logging import log_operation
        
        # Start monitoring session –¥–ª—è Single Pipeline
        session_id = None
        if not continuous_mode:
            try:
                import requests
                response = requests.post('http://localhost:8001/api/pipeline/session/start', timeout=1.0)
                if response.status_code == 200:
                    session_id = response.json().get('session_id')
                    logger.info(f"üìä –ó–∞–ø—É—â–µ–Ω–∞ —Å–µ—Å—Å–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {session_id}")
            except:
                pass  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–ø—É—â–µ–Ω
        
        if continuous_mode:
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ CONTINUOUS –ø–∞–π–ø–ª–∞–π–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö pending —Å—Ç–∞—Ç–µ–π")
            logger.info(f"   –ú–∞–∫—Å–∏–º—É–º —Å—Ç–∞—Ç–µ–π: {max_articles if max_articles else '–±–µ–∑ –ª–∏–º–∏—Ç–∞'}")
            logger.info(f"   –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏: {delay_between} —Å–µ–∫")
            log_operation('continuous_pipeline_start',
                mode='continuous',
                max_articles=max_articles,
                delay_between=delay_between
            )
        else:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: 1 —Å—Ç–∞—Ç—å—è –æ—Ç pending –¥–æ WordPress")
        
        try:
            if continuous_mode:
                # CONTINUOUS MODE: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –≤ —Ü–∏–∫–ª–µ
                while not self.stop_requested:
                    cycle_count += 1
                    cycle_start = time.time()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
                    if max_articles and self.processed_count >= max_articles:
                        logger.info(f"üìä –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç–∞—Ç–µ–π: {max_articles}")
                        log_operation('continuous_pipeline_stop',
                            reason='max_reached',
                            total_processed=self.processed_count,
                            total_duration_seconds=time.time() - self.start_time.timestamp()
                        )
                        break
                    
                    # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞—Ç—å—é
                    article = self.get_next_article()
                    
                    if not article:
                        logger.info("‚úÖ –í—Å–µ pending —Å—Ç–∞—Ç—å–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
                        log_operation('continuous_pipeline_stop',
                            reason='no_more_articles',
                            total_processed=self.processed_count,
                            total_duration_seconds=time.time() - self.start_time.timestamp()
                        )
                        break
                    
                    logger.info(f"\n{'='*60}")
                    logger.info(f"üîÑ –¶–∏–∫–ª #{cycle_count}: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏ {self.processed_count + 1}/{max_articles if max_articles else '‚àû'}")
                    logger.info(f"{'='*60}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å—é
                    result = await self.process_single_article(article)
                    self.processed_count += 1
                    
                    if result['success']:
                        self.success_count += 1
                        if 'wordpress_pub' in result.get('phases_completed', []):
                            self.wordpress_published += 1
                            logger.info("‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ WordPress!")
                        else:
                            logger.info("‚úÖ –°—Ç–∞—Ç—å—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                    else:
                        self.error_count += 1
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error')}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
                    log_operation('continuous_cycle_complete',
                        cycle_number=cycle_count,
                        articles_processed=self.processed_count,
                        success_count=self.success_count,
                        failed_count=self.error_count,
                        duration_seconds=time.time() - cycle_start
                    )
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ç—å–µ–π (–µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è)
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±—Ä–∞–ª–∏ –ª–∏—à–Ω–∏–π –≤—ã–∑–æ–≤ get_next_article() –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–≤–∞–ª —Ñ–∞–Ω—Ç–æ–º–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    # –°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—Ä–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ 676
                    if not self.stop_requested and (not max_articles or self.processed_count < max_articles):
                        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay_between} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ç—å–µ–π...")
                        await asyncio.sleep(delay_between)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                if self.stop_requested:
                    logger.info("‚èπÔ∏è –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    log_operation('continuous_pipeline_stop',
                        reason='user_requested',
                        total_processed=self.processed_count,
                        total_duration_seconds=time.time() - self.start_time.timestamp()
                    )
            
            else:
                # SINGLE MODE: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω—É —Å—Ç–∞—Ç—å—é (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                article = self.get_next_article()
                
                if not article:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç pending —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    return {
                        'status': 'no_articles',
                        'error': 'No pending articles available',
                        'processed_count': 0
                    }
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≠–¢–£ —Å—Ç–∞—Ç—å—é —á–µ—Ä–µ–∑ –≤—Å–µ —Ñ–∞–∑—ã
                result = await self.process_single_article(article)
                
                self.processed_count = 1
                
                if result['success']:
                    self.success_count = 1
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—à–ª–∞ –ª–∏ —Å—Ç–∞—Ç—å—è –¥–æ WordPress
                    if 'wordpress_pub' in result.get('phases_completed', []):
                        self.wordpress_published = 1
                        logger.info("‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ WordPress!")
                    else:
                        logger.info("‚úÖ –°—Ç–∞—Ç—å—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –Ω–æ –Ω–µ –¥–æ—à–ª–∞ –¥–æ WordPress")
                else:
                    self.error_count = 1
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏ {article['article_id']}: {result.get('error')}")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
            self.status = PipelineStatus.ERROR
            await self._notify('on_error', {'error': str(e)})
        
        finally:
            # Complete monitoring session –¥–ª—è Single Pipeline
            if not continuous_mode and session_id:
                try:
                    import requests
                    requests.post('http://localhost:8001/api/pipeline/session/complete', 
                                json={'total_articles': self.processed_count}, 
                                timeout=1.0)
                    logger.info(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–µ—Å—Å–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {session_id}")
                except:
                    pass  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–ø—É—â–µ–Ω
            
            self.status = PipelineStatus.STOPPED
            duration = (datetime.now() - self.start_time).total_seconds()
            
            final_stats = {
                'status': self.status.value,
                'duration_seconds': duration,
                'processed_count': self.processed_count,
                'success_count': self.success_count,
                'error_count': self.error_count,
                'wordpress_published': self.wordpress_published,
                'phase_stats': self.phase_stats
            }
            
            await self._notify('on_status_change', final_stats)
            
            if continuous_mode:
                logger.info(f"\n{'='*60}")
                logger.info(f"üèÅ CONTINUOUS PIPELINE –ó–ê–í–ï–†–®–ï–ù")
                logger.info(f"{'='*60}")
                logger.info(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: {self.processed_count}")
                logger.info(f"   –£—Å–ø–µ—à–Ω–æ: {self.success_count}")
                logger.info(f"   –° –æ—à–∏–±–∫–∞–º–∏: {self.error_count}")
                logger.info(f"   –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ WordPress: {self.wordpress_published}")
                logger.info(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {duration:.1f} —Å–µ–∫ ({duration/60:.1f} –º–∏–Ω)")
                if self.processed_count > 0:
                    logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞—Ç—å—é: {duration/self.processed_count:.1f} —Å–µ–∫")
                logger.info(f"{'='*60}")
            else:
                logger.info(f"üèÅ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω: 1 —Å—Ç–∞—Ç—å—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞ {duration:.1f} —Å–µ–∫, "
                           f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'—É—Å–ø–µ—Ö' if self.success_count > 0 else '–æ—à–∏–±–∫–∞'}, "
                           f"WordPress: {'–¥–∞' if self.wordpress_published > 0 else '–Ω–µ—Ç'}")
            
            return final_stats
    
    def request_stop(self):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        self.stop_requested = True
        self.status = PipelineStatus.STOPPED
        logger.info("‚èπÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞")
    
    def pause(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–π–ø–ª–∞–π–Ω"""
        self.status = PipelineStatus.PAUSED
        logger.info("‚è∏Ô∏è –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def resume(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–π–ø–ª–∞–π–Ω"""
        if self.status == PipelineStatus.PAUSED:
            self.status = PipelineStatus.RUNNING
            logger.info("‚ñ∂Ô∏è –ü–∞–π–ø–ª–∞–π–Ω –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    def _get_article_media_count(self, article_id: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—å–∏"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.execute(
                    "SELECT COUNT(*) FROM media_files WHERE article_id = ?",
                    (article_id,)
                )
                return cursor.fetchone()[0]
        except Exception:
            return 0
    
    async def _get_article_media(self, article_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Å—Ç–∞—Ç—å–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            with self.db.get_connection() as conn:
                # –ò—â–µ–º –º–µ–¥–∏–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending (–Ω–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ)
                cursor = conn.execute("""
                    SELECT media_id as id, article_id, source_id, url, type, alt_text, caption
                    FROM media_files 
                    WHERE article_id = ? AND status = 'pending'
                """, (article_id,))
                
                return [dict(row) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"Error getting article media: {e}")
            return []
    
    def _update_media_status(self, article_id: str, status: str):
        """–û–±–Ω–æ–≤–∏—Ç—å media_status —Å—Ç–∞—Ç—å–∏"""
        try:
            with self.db.get_connection() as conn:
                conn.execute(
                    "UPDATE articles SET media_status = ? WHERE article_id = ?",
                    (status, article_id)
                )
        except Exception as e:
            logger.error(f"Error updating media status: {e}")
    
    def _update_article_status(self, article_id: str, status: str):
        """–û–±–Ω–æ–≤–∏—Ç—å content_status —Å—Ç–∞—Ç—å–∏"""
        try:
            with self.db.get_connection() as conn:
                conn.execute(
                    "UPDATE articles SET content_status = ? WHERE article_id = ?",
                    (status, article_id)
                )
        except Exception as e:
            logger.error(f"Error updating article status: {e}")
    
    def _is_wordpress_prepared(self, article_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –ª–∏ —Å—Ç–∞—Ç—å—è –¥–ª—è WordPress"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.execute(
                    "SELECT id FROM wordpress_articles WHERE article_id = ? AND translation_status = 'translated'",
                    (article_id,)
                )
                return cursor.fetchone() is not None
        except Exception:
            return False
    
    def _is_wordpress_published(self, article_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ª–∏ —Å—Ç–∞—Ç—å—è –≤ WordPress"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.execute(
                    "SELECT id FROM wordpress_articles WHERE article_id = ? AND published_to_wp = 1",
                    (article_id,)
                )
                return cursor.fetchone() is not None
        except Exception:
            return False
    
    def _clean_failed_image_placeholders(self, content: str, article_id: str) -> str:
        """
        –£–±–∏—Ä–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã [IMAGE_N] –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∫–æ—Ç–æ—Ä—ã–µ failed –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        
        Args:
            content: –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏ —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏
            article_id: ID —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞ —Å—Ç–∞—Ç—É—Å–∞
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ failed –∫–∞—Ä—Ç–∏–Ω–æ–∫
        """
        import re
        
        try:
            with self.db.get_connection() as conn:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º failed –∏–ª–∏ pending
                cursor = conn.execute("""
                    SELECT url, alt_text, status, image_order
                    FROM media_files 
                    WHERE article_id = ?
                    ORDER BY image_order
                """, (article_id,))
                
                media_files = cursor.fetchall()
                
                # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ failed/pending –∫–∞—Ä—Ç–∏–Ω–æ–∫
                failed_image_numbers = []
                for row in media_files:
                    if row['status'] in ('failed', 'pending') and row['image_order'] is not None:
                        failed_image_numbers.append(row['image_order'])
                
                # –£–±–∏—Ä–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã failed –∫–∞—Ä—Ç–∏–Ω–æ–∫
                cleaned_content = content
                for image_num in failed_image_numbers:
                    placeholder = f"[IMAGE_{image_num}]"
                    cleaned_content = cleaned_content.replace(placeholder, "")
                    logger.info(f"Removed placeholder {placeholder} for failed media")
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                cleaned_content = re.sub(r'\n\s*\n', '\n\n', cleaned_content)
                cleaned_content = re.sub(r'  +', ' ', cleaned_content)
                
                return cleaned_content
                
        except Exception as e:
            logger.error(f"Error cleaning image placeholders: {e}")
            return content
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        return {
            'status': self.status.value,
            'current_article': self.current_article,
            'processed_count': self.processed_count,
            'success_count': self.success_count,
            'error_count': self.error_count,
            'phase_stats': self.phase_stats,
            'start_time': self.start_time.isoformat() if self.start_time else None
        }